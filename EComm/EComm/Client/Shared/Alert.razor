@if (Show) {
  <div class="alert alert-secondary alert-dismissible fade show mt-4" role="alert">
    @ChildContent
    <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="Dismiss">
      <span aria-hidden="true">&times;</span>
    </button>
  </div>
}

@code {
    private bool _show;
    private System.Threading.Timer? _timer;

    [Parameter]
    public bool Show
    {
      get => _show;
      set
      {
        if (value != _show) {
          _show = value;
          ShowChanged?.InvokeAsync(_show);

          if (value) {
            _timer = new System.Threading.Timer(
              callback: _ => InvokeAsync(() => Dismiss()),
              state: null,
              dueTime: TimeSpan.FromSeconds(5),
              period: System.Threading.Timeout.InfiniteTimeSpan);
          }
        }
      }
    }

    [Parameter]
    public EventCallback<bool>? ShowChanged { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    public void Dismiss() => Show = false;
}
